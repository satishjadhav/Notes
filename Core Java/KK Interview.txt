https://www.youtube.com/watch?v=BUaGXxUJ7Zg&list=PLzS3AYzXBoj84LfxRFAuM-eDlPRWvhGeJ

-The path is required to be set for using tools such as javac,java,wsimport,jvisualvm etc.
-If you save the java source file inside the JDK/bin folder the path is not required to be set because all the tools will be available in the current directory.
-Can we overload main in Java?
	public class JavaMainMethodInterviewOverload1 {

		//public static void main(String []args){
		public static void main(String... args){
			System.out.println("Main method.");
			System.out.println("-----------------------");
			main.("kk");
			System.out.println("-----------------------");
			main("KK",30);
		}

		public static void main(String name){
			System.out.println(name);
		}
		
		public static void main(String name,int age){
			System.out.println(name);
			System.out.println(age);
		}
	}
-Can we override main in java?
	No becouse main is satic method and in java static method is bounded during complie time.
-Can we make main final in java?
	yes
-Can we make main synchronized in java? YES
-Summary:	
	The main()method is a static method
	You can overload main() method
	You cannot override main() method
	You can make the main method final
	You can make the main method synchronized
	You cannot call a non-static method from main method directly but you can call it by using object reference.
-Can we define a class without main method? Yes using static block by using java 6 and prior
-Can we declare main() method with differnt access modifier other than public? Yes it will compile but will throw runtime exception.
-Java has inbuilt support for multi-threading and concurrency, it's easy to write scaable applications in java that can utilize multi-core processors,clusters of machines,distributed RAM etc.There is in built support for Threads,non-blocking algorithm using CAS,Strean API,Parallel Streams,CompletableFuture,Parallel Array Operations,Atomic Values etc.  
-Memory management is automic by use of garbage collector like G1,Concurrent Mark Sweep,parallel garbage collector.
-What are the key paradigms for developing the clean object oriented code?
	Program to an interface (or the Super Type) not the implementation.
	Interacting classes should be loosely coupled among themselves.
	Code should implement tight encapsulation.Use of public and static variables should be aovoided because they introduce coupling and make testing of classed tough.Avoid the singleton Dsign pattern wherver possible.
	Always resue the code using Inheritance,Composition and Utility Methods.Stricly follow the Do Not Repeat Yourself(DRY)priciple.
	Has-A relationship is better than Is-A relationship because it offer more flexibility(Decorator Design Pattern).
	In case of multi-threaded applications,use immutable objects to represent the state.
-How can we maintain immutability of a class with a mutable reference?
	Make your class final so that no other classes can extend it.
	Make all instance variables private and final so that they are initialized only once inside the constructor and never modified afterward.
	Provide only getter methods don't provide setter methods.
	If the class holds a mutable object:
		Make sure to always return a clone copy of the field and never return the real object instance.
-Do all propertied of an Immutable Object need to be final?
	You can achieve same functionality by making the instance member non-final but private and not modifying them except in a constructor.
	Don't provide setter methods and if it is a mutable object, then don't ever leak any reference for that member.
	If reference variable final only ensures that it will not be reassigned to a different value,but you can still change individual properties of object, pointed by that reference variable.
	public static void main(String []args){
		double numbersArr[] = {9.0,12.5,0.0,99.0,123};
		for(double divisor  : numversArr){
			double d = 125.0/divisor;
			if(!Double.isFinite(d)){
				double m = d*100;
				System.out.println(m);
			}
		}
	}
-What is aggregation,how is it differnt from composition ?
	Aggregation and Composition are special type of associaton and differ only in weight of relationship.
	Composition is stronger form of "is part of" relationship compared to aggregation "has a".
	In composition, the member object can not exits outside the enclosing class while same is not true for aggregation.
-What is difference between stack and Heap area of JMV memeory?
	Stack:Memory of Stack section is bound to method context and is destroyed once a thread returns from the function i.e. the Stack objects exists within the scope of the function they are created in.
	Stack section of memory contains methods,local variables and reference variables and all these are cleared when a thread returns from the method call.
	Heap:objects exits outside the method scope and are available till GC recollects the memory.
	Java stores all objects in Heap wether they are created from within a method or class.
	All class level variables and references are also stored in heap so that they can be accessed from anywhere.Metadata of classe, methods also reside in Heap's PermGen space.
-Why prime number are given much importance in writing certain algorithms like hashcode,RSA algorithms,random number generators etc.
	Prime numbers are always unique and can not be divided by any other number except1.The product of prime number with any other number has the best chances of being unique.
	This property makes them very suitable for use in hashing function to obtain fair distribution in its hashcode output and thus achieving low collisions.
	Multiplying by the prime number will not tend to shift information away from the low end as it would multiplying by a power of 2,thus achieving a fair randomness.
-What is difference between 32 bits and 64 bits version of java.?
	The java language specifications are same for the both platform.
	Pure java code will not see any difference provided external natice calls are not used.
	All that changes is the amount of addressable memory (good) and the amount of memory per Object (not that good)
	The size of the reference variable doubles from 32 bits to 64 bits, thus all the reference variable will take double the size when running on 64 bits JVM.
	There are no class file differences between code complied with 32 bit and 64 bits versions of the same revision of java.
	For 32 bits JMV tha maximum memory is limited to 4 GB, the memory limit for 64 bits JVM is very high.
	64 bits JVM requires more memory compared to 32 bits JVM for the same application because now each reference starts consuming 64 bits instead of 32 bits.
-Java memory model inteview questions and answers?
	Memory taken up by the JVM is divided into Stack, Heap and Non Heap memory areas.
	Stacks are taken up by individual thread for running the method code while heap is used to hold all class instances and arrays created using new operation.
	Non heap memory includes a method area shared among all threads and is logically part of the heap but,depending upon the implementaion, a java VM may not invoke GC on this part.
	Eden Space (heap):
		The pool from which memory is initially allocated for most objects.
	Survivor Space (heap):
		The pool containing objects that have survived the garbage collection of the Eden space.
	Tenured/Old Generation (heap):
		The pool containing objects that have existed for some time in the survior space.
	Metaspace (non-heap):
		The pool containing all the relective data of the virtual machine itself,such as meta-data of classes,objects (e.g. pointers into the heap where objetcs are allocated) and method objects,classloader related data.
	Code Cache (non-heap):
		The HotSpot Java VM also includes a code cache,containing memory that is used for compilation and storage of native code.

-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
--
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
--
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-