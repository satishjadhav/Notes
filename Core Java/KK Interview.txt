https://www.youtube.com/watch?v=BUaGXxUJ7Zg&list=PLzS3AYzXBoj84LfxRFAuM-eDlPRWvhGeJ

-The path is required to be set for using tools such as javac,java,wsimport,jvisualvm etc.
-If you save the java source file inside the JDK/bin folder the path is not required to be set because all the tools will be available in the current directory.
-Can we overload main in Java?
	public class JavaMainMethodInterviewOverload1 {

		//public static void main(String []args){
		public static void main(String... args){
			System.out.println("Main method.");
			System.out.println("-----------------------");
			main.("kk");
			System.out.println("-----------------------");
			main("KK",30);
		}

		public static void main(String name){
			System.out.println(name);
		}
		
		public static void main(String name,int age){
			System.out.println(name);
			System.out.println(age);
		}
	}
-Can we override main in java?
	No becouse main is satic method and in java static method is bounded during complie time.
-Can we make main final in java?
	yes
-Can we make main synchronized in java? YES
-Summary:	
	The main()method is a static method
	You can overload main() method
	You cannot override main() method
	You can make the main method final
	You can make the main method synchronized
	You cannot call a non-static method from main method directly but you can call it by using object reference.
-Can we define a class without main method? Yes using static block by using java 6 and prior
-Can we declare main() method with differnt access modifier other than public? Yes it will compile but will throw runtime exception.
-Java has inbuilt support for multi-threading and concurrency, it's easy to write scaable applications in java that can utilize multi-core processors,clusters of machines,distributed RAM etc.There is in built support for Threads,non-blocking algorithm using CAS,Strean API,Parallel Streams,CompletableFuture,Parallel Array Operations,Atomic Values etc.  
-Memory management is automic by use of garbage collector like G1,Concurrent Mark Sweep,parallel garbage collector.
-What are the key paradigms for developing the clean object oriented code?
	Program to an interface (or the Super Type) not the implementation.
	Interacting classes should be loosely coupled among themselves.
	Code should implement tight encapsulation.Use of public and static variables should be aovoided because they introduce coupling and make testing of classed tough.Avoid the singleton Dsign pattern wherver possible.
	Always resue the code using Inheritance,Composition and Utility Methods.Stricly follow the Do Not Repeat Yourself(DRY)priciple.
	Has-A relationship is better than Is-A relationship because it offer more flexibility(Decorator Design Pattern).
	In case of multi-threaded applications,use immutable objects to represent the state.
-How can we maintain immutability of a class with a mutable reference?
	Make your class final so that no other classes can extend it.
	Make all instance variables private and final so that they are initialized only once inside the constructor and never modified afterward.
	Provide only getter methods don't provide setter methods.
	If the class holds a mutable object:
		Make sure to always return a clone copy of the field and never return the real object instance.
-Do all propertied of an Immutable Object need to be final?
	You can achieve same functionality by making the instance member non-final but private and not modifying them except in a constructor.
	Don't provide setter methods and if it is a mutable object, then don't ever leak any reference for that member.
	If reference variable final only ensures that it will not be reassigned to a different value,but you can still change individual properties of object, pointed by that reference variable.
	public static void main(String []args){
		double numbersArr[] = {9.0,12.5,0.0,99.0,123};
		for(double divisor  : numversArr){
			double d = 125.0/divisor;
			if(!Double.isFinite(d)){
				double m = d*100;
				System.out.println(m);
			}
		}
	}
-What is aggregation,how is it differnt from composition ?
	Aggregation and Composition are special type of associaton and differ only in weight of relationship.
	Composition is stronger form of "is part of" relationship compared to aggregation "has a".
	In composition, the member object can not exits outside the enclosing class while same is not true for aggregation.
-What is difference between stack and Heap area of JMV memeory?
	Stack:Memory of Stack section is bound to method context and is destroyed once a thread returns from the function i.e. the Stack objects exists within the scope of the function they are created in.
	Stack section of memory contains methods,local variables and reference variables and all these are cleared when a thread returns from the method call.
	Heap:objects exits outside the method scope and are available till GC recollects the memory.
	Java stores all objects in Heap wether they are created from within a method or class.
	All class level variables and references are also stored in heap so that they can be accessed from anywhere.Metadata of classe, methods also reside in Heap's PermGen space.
-Why prime number are given much importance in writing certain algorithms like hashcode,RSA algorithms,random number generators etc.
	Prime numbers are always unique and can not be divided by any other number except1.The product of prime number with any other number has the best chances of being unique.
	This property makes them very suitable for use in hashing function to obtain fair distribution in its hashcode output and thus achieving low collisions.
	Multiplying by the prime number will not tend to shift information away from the low end as it would multiplying by a power of 2,thus achieving a fair randomness.
-What is difference between 32 bits and 64 bits version of java.?
	The java language specifications are same for the both platform.
	Pure java code will not see any difference provided external natice calls are not used.
	All that changes is the amount of addressable memory (good) and the amount of memory per Object (not that good)
	The size of the reference variable doubles from 32 bits to 64 bits, thus all the reference variable will take double the size when running on 64 bits JVM.
	There are no class file differences between code complied with 32 bit and 64 bits versions of the same revision of java.
	For 32 bits JMV tha maximum memory is limited to 4 GB, the memory limit for 64 bits JVM is very high.
	64 bits JVM requires more memory compared to 32 bits JVM for the same application because now each reference starts consuming 64 bits instead of 32 bits.
-Java memory model inteview questions and answers?
	Memory taken up by the JVM is divided into Stack, Heap and Non Heap memory areas.
	Stacks are taken up by individual thread for running the method code while heap is used to hold all class instances and arrays created using new operation.
	Non heap memory includes a method area shared among all threads and is logically part of the heap but,depending upon the implementaion, a java VM may not invoke GC on this part.
	Eden Space (heap):
		The pool from which memory is initially allocated for most objects.
	Survivor Space (heap):
		The pool containing objects that have survived the garbage collection of the Eden space.
	Tenured/Old Generation (heap):
		The pool containing objects that have existed for some time in the survior space.
	Metaspace (non-heap):
		The pool containing all the relective data of the virtual machine itself,such as meta-data of classes,objects (e.g. pointers into the heap where objetcs are allocated) and method objects,classloader related data.
	Code Cache (non-heap):
		The HotSpot Java VM also includes a code cache,containing memory that is used for compilation and storage of native code.
-Why We should never invoke GC pro grammatically from within your code ? || Garbage collector in java
	Invoking System.gc() may have significant performance side effects on the application.
	GC knows when to invoke partial or full collection.Whenever there is a need it tries to collect the space from Young Generation First (very low performance overhead),but when we force our JVM to invoke System.gc() JVM will do a Full GC which might pause your application for certain amount of time.
-Scenario based java garbage collection interview question
	Performing tuning GC may slow this problem to some extent.
	This application creates lots of short lived objects - thus we would require a large young generation for lowering the frequency of minor garbage collection.
	If our young generation is small, then the short lived objects will be promoted to Tenured Generation and thus casuing frequent major collection.This can be addressed by setting appropriate value for -XX:NewSize parameter at the JVM startup.
	We also need to adjust the survivor ratio that the Eden space is large compared to survivor space, large value of Survivor ratio should help solve this problem.
	e.g.
	java -client -XX:SurvivorRatio=12 -XX:NewRatio=2 -XX:NewSize=50m -Xmx256m -Xms64m -XXMaxMetaspace=128m -XX:+PrintGCDetails -jar MyApp.jar
-What are the available tools to give the visual view of the different memory spaces in a running JVM
	JVisualVM,JConsole,JProfiler,YourKit
-Tricky Interview questions
	public class A {
		public A() {
			greeting();
			prints();
		}
		void greeting() {
			System.out.println("instance method from A");
		}
		static void prints() {
			System.out.println("static method from A");
		}
	}
	
	public class B extends A {
		public B() {
			greeting();
			prints();
		}
		void greeting() {
			System.out.println("instance method from B");
		}
		static void prints() {
			System.out.println("static method from B");
		}
	}
	public class Test {
		public static void main(String []args) {
			new B();
		}
	}
	o/p:
	instance method from B
	static method from A
	instance method from B
	static method from B
-When should we choose Array, ArrayList, LinkedList over one another for a given Scenario and Why?
	Array is a fixed size collection which can hold primitive or Objects.Array itself is a object and memory for array object is allocated on the Heap.
	Array does not provide useful collections methods like add(),remove(),iterator() etc.
	We should choose array only when the size of inputs is fixed and known in advance and underlying elements are of primitive type.
	LinkedList provides constant-time (Big O(1)) methods for insertion and removal using Iterators.But the methods to find the elements have Big O(n) time complexity (Liner Time,proportional to the size of list) and thus are poor performing.
	LinkedList has more memory overhead because it needs two nodes for each element which point to previous and next element in the LinkedList.If you are looking for random access of elements then ArrayList is the way to go for.
-What are new Features added in Java 8 ?
	Default methods enable new functionality to be added to the interfaces of libraries and ensure binary compatibility with code written for older versions of those interfaces.
	Optimistic Locking in Code using StampedLock provides very lightweight synchronization.
	Concurrent Adders and Accumulators - DoubleAdder,DoubleAccumulator,LongAdder,LongAccumulator
	Array Parallel Sorting API
	Complete New Date API
	Functional Interfaces and Lambda Expression (see java.util.function package)
	Stream API in collections enables bulf operations such as sequential and parallel map-reduce functions.
	Improvements in ConcurrentHashMap added methods for atomic and bulk operations.
	New classes added to java.util.concurrent.atomic methods for atomic and bulk operations
	New classes added to java.util.concurrent.atomic to support scalable up-datable variables
	PermGen space removed,Metaspace added.
-What all collections utilizes hashCode method? ||Hashing Data Structure in Java Interview Questions?
	Only hashing data structures uses hashCode() method along with equals() method, though the equals() is used by almost every class.
	hashCode is useful for creating hashing based data structures like HashMap,LinkedHashMap,CocurrentHashMap,HashSet.
	HashCode is used to provide best case O(1) time complexity for searching the stored element.
	TreeeMap,TreeSet uses Comparator/Comparable for comparing the elements against each other, so these data structures do not require hashCode() method.
	The beast case time complexity offered by these data structures for lookup is logarithmic rather than constant.
-What is Logarithm ? Why is it relevant in software Development?
	A Logarithm tells what exponent (power) is needed to make a certain number.In a way it is opposite of exponentiation.
	Logarithm converts big number values into smaller , human readable format.
	Logarithm has the below mathematical properties
		Sum of logs = log of product
		log10(100) + log10(1000) = log10(100,000)
		i.e.	2  + 3			 =	5
		Subtraction of logs = log of division
		log10(100) - log10(1000) = log10(100)
		i.e.	3  - 1			 = 2
	In divide and conquer algorithm (Binary Search,Data Partitioning,etc.) the problem set is halved in each iteration which results in logarithmic Big O(log n) time complexity.
-What do you understand by Big O notation, why is it important in software development?
	Big O Notation is a mechanism used to measure the relative efficiencies of Algorithm in terms of Space and Time.
	Constant O(1) - a program whose running time's order of growth is constant , executes a fixed number of operations to finish the job thus its running time does not depends on N (N-input).
	Liner O(N) - a program that spends a constant amount of time processing each piece of input data and thus running time is proportional to the N.
	Logarithmic O (log n) -a program where on every subsequent iteration the the problem size is cut by half for example Binary Search.
	O(1)-Constant Time-Searching from HashMap, check a number for even/odd
	O(log n)-Logarithmic-Find an item sorted array using Binary Search
	O(n)-Liner-Printing all elements from an array.
	O(n log n)-Log linear-Sorting using Merge Sorting
	O(n2)-Quadratic-Bubble sorting algorithm
	We should always keep time efficiencies in mind while designing an algorithm for a data structures.
	Base of Logarithm is irrelevant in Big O Notation
		The base of algorithm is not relevant with respect to the order of growth, since all logarithms with a constant base are all related by a constant proportion so log N is used when referring to the order of growth regardless of the base of algorithm.
	Time efficiency in Big O notation for few Java Collections
		ArrayList(ignoring the time taken by array resize operation)
			O(1) for add,size and get
			O(n) for toString() method
		HashMap & ConcurrentHashMap (with no collisions)
			O(1) for get operation
			O(1) for put operation
		LinkedList	
			O(1) for removal and O(1) for add and poll method
			O(n) for toString() method
-How would you determine the Time Complexity of a given algorithm are there any general guidelines?
	1 Consecutive Statements (Add the Complexity)
		We should add the time complexity of each statement to calculate the total time complexity.For example if we have 3 lines of code with O(1),O(log n) and O(n) complexity respectively then the total time complexity would be 
		O(1) + O(log n) + O(n) = ~O(n)
		In case of if-else condition we should include the time complexity of condition and if or else part,whichever is larger.
	2 Iterations and Loops - for, while and do-while (Multiply the Complexity)
		Total time complexity can be calculated by multiplying the Time Complexity of individual statement with the number of iterations.
			for(int i=0;i<N;i++) {
				PriorityQueue.offer(i); O(log k)
			}
		Time Complexity = O(log k) x O(n) = O(n log k)
		In case of nested loops (Multiply the Complexity)
	3 Logarithmic Time Complexities (Logarithmic Complexity)
		In certain scenarios the problem size is cut by 1/2 on each subsequent iteration and the resulting time complexity is O(log n)
-Explain working of a hashing data structure for example HashMap in Java
	HashMap is a hashing data structure which utilizes object's hashcode to place that object inside map.It provides best case time complexity of O(1) for insertion and retrieval of an object.
	HashMap is not thread safe so we should provide necessary synchronization if used in multi-threaded environment.
	HashMap is basically an array of buckets where each bucket uses linked list to hold elements.
	Initial Capacity : The default capacity of a hashmap is 16 (the number of bucket and it is always expressed in power of two 2,4,8,16 etc.)
	bucket index =  hashcode % (number of buckets)
	The actual method is implemented as
	int indexFor(int hashCode,int length) {
		return hashCode & (length -1);
	}
	get operation takes a key and then calculate the index of bucket using the method mention below.Then that bucket's List is searched for the given key using key's equals() method and finally the result is returned.
	bucket index = hashcode % (number of buckets)
	The actual method is implemented as 
	int indexFor(int hashcode, int length) {
		return hashcode & (length-1)
	}
	Load factor and Rehashing 
	Rehashing occurs automatically by the map when the number of keys in the map reaches threshold value:
		threshold = capacity*(load factor of 0.75)
	After Rehashing a new array is created with more capacity and all the existing contents are copied over to it.
-Concurrent HashMap interview Questions
	https://www.youtube.com/watch?v=h06AxHF2E0Y&list=PLzS3AYzXBoj84LfxRFAuM-eDlPRWvhGeJ&index=27
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
--
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
--
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-