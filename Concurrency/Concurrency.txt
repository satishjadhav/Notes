https://www.youtube.com/playlist?list=PLhfHPmPYPPRk6yMrcbfafFGSbE2EPK_A6
----------------------------------------------------------------------------------------------------
=>Concurrency Vs Parallelism
	
-Schedular of OS schedules the thread execution.
-Parallelism is about doing lot of things at once.
-Parallelism using java threadpool:
	public static void main(String args[]){
		ExecutorService es = Executors.newFixedThreadPool(nThreads:4);
		es.submit(()->processTx(user1));
		es.submit(()->processTax(user2));
		heavyCalculations();
	}
-Threads
-Threads
	-ExecutorService
	-ForlJoinPool
	-Custom ThreadPools (e.g Web Servers)
-Requires > 1 CPU cores
-Scheduler interleaves threads.
-How much time each thread gets is non deterministic.
-Concurrency is about dealing with lot of things at once.
-Tools to deal with concurrency
	-Locks/synchronized
	-Atomic classes
	-Concurrent data structures (e.g ConcurrentHashMap,BlockingQueue)
	-CompletableFuture
	-CountdownLatch/Phaser/CyclicBarrier/Semaphore etc

=>Java memory Model
-Out of order execution
-Field visibility
	CPU core -> registers -> L1 cache -> L2 cache -> L3 cache -> RAM
-Java memory model is a specification which guarantees visibility of fields (aka happenda before amidst reordering of instructions).
-Volatile -> synchronized -> Lock (ReentrantLock)

=>Using volatile vs AtomicInteger in Java concurrency
-AtomicInterger
	incrementAndGet
	decrementAndGet
	addAndGet(int delta)
	compareAndSet(int expectedValue,int newValue)
-Visibility problem use Volatile
-Compound Operations use Atomic Variables

Type				UseCase
----------------------------------------
Volatile			Flags

AtomicInteger			Counters
AtomicLong			

AtomicReference			Caches (building new cache in background and replacing atomically)
				Used by some internal classes
				Non-blocking algorithms

=>Adder and Accumulator classes in Java 8
public static void main(String []args) throws InterruptedException {

	//AtomicLong counter = new AtomicLong(initialValue:0);

	//LongAdder counter = new LongAdder();

	//LongAccumulator counter = new LongAccumulator((x,y) -> x+y, identity:0s);

	ExecutorService service = Executors.newFixedThreadPool(nThreads: 16);

	for(int i=0; i<100; i++) {
		service.submit(new Task(counter));
	}
	Thread.sleep(100);
	//System.out.println(counter.get());
	System.out.println(counter.sum()); //All thread-local variables added
}
private static class Task implements Runnable {
	private final AtomicLong counter;
	public Tak(AtomicLong counter) {
		this.counter = counter;
	}

	@Override
	public void run(){
		//counter.incementAndGet();
		//counter.increment(); //Thread-local variable incremented
		counter.accumulate(x:1);
	}
}

Accumulator : More generic version of Adder

LongAccumulator counter = new LongAccumulator((x,y) -> x+y, identity:0);
LongAccumulator result = new LongAccumulator((x,y) -> x*y, identity:0);
LongAccumulator min = new LongAccumulator((x,y) -> Math.min(x,y), identity:0);
LongAccumulator max = new LongAccumulator((x,y) -> Math.min(x,y), identity:0);

Best suited for write heavy operations
Order of operations is not deterministic
Accumulation function mat not be applied repeatedly

=>Understanding how ForkJoinPool works

public Result solve(Task t){
	split t into smaller tasks

	for each if these tasks
		solve(t)
	wait for all tasks to complete

	jion all indivisual results

	return results
}

In fork jion framework threads storing all task into its own double ended queue (dequeue)
	Execute Runnable		execute(Runnable)
	Submit Runnable			submit(Runnable)
	Submit Runnable			submit(Callable)


					Call from non-fork-join clients			Call from within fork/jion computations
Arrange async execution			execute(ForkJoinTask)				fork()
Await and obtain result			invoke(ForkJoinTask)				invoke()
Arrange exec and obtain Future		submit(ForkJoinTask)				fork()(ForkJoinTasks are Futures)


Used for Sorting,Matrix multiplication,Best move finder for a game,Tree traversal

SynchronousQueue:
SynchronousQueue is same as BlockingQueue but with size of 1
SQ has no size at all there is a direct handoff between Producer and Consumer thread.
No peek method,no iterate method,perfect for handoffs.

ThradLocal:
Per thread instances for memory efficiency and thread-safety.
Per Thread context
class ThreadSafeFormatter {
	public static ThreadLocal<SimpleDateFormat> dateFormat = new ThreadLocal<SimpleDateFormat>(){
		@Override
		protected SimpleDateFormat initialValue(){
			return new SimpleDateFormat("yyyy-MM-dd");
		}

		@Override
		public SimpleDateFormat get(){
			return super.get();
		}
	}
}

public class UserService {
	public satic void main(String []args){
		//...
	}
	public String birthDate(int userId){
		Date birthDate = birthDateFromDb(userId);
		final SimpleDateFormat df = ThreadSafeFormatter.dateFormatter.get();
		return df.format(birthDate);
	}
}

java-8
class ThreadSafeFormatter {
	public static ThradLocal<SimpleDateFormat> df = ThreadLocal.withInitial(()-> new SimpleDateFormat("yyyy-MM-dd"));
}

public class UserService {
	
	public static void main(String []args){
		//...
	}

	public String birthDate(int userId){
		Date birthDate = birthDateForDB(userId);
		final SimpleDateFormat df = ThradLocalFormatter.df.get();
		return df.format(birthDate);
	}
}
Spring framework uses lot of Context holders:
	LocalContextHolder
	TransactionContextHolder
	RequestContextHolder
	DateTimeContextHolder
	SecurityContextHolder
Thread confinement
Per thread object for perf
per thread context

Phaser Vs CountDownLatch Vs CyclicBarrier:

public static void main(String []args) thorws InterruptedException {

	ExecutorService executor = Executor.newFixedThreadPool(nThreads:4);
	CountDownLatch latch = new CountDownLatch(3);

	executor.submit(new DependentService(latch));
	executor.submit(new DependentService(latch));
	executor.submit(new DependentService(latch));

	latch.wait();

	System.out.println("All dependant services initialized");
}

public static class DependentService impelements Runnable {
	private CountDownLatch latch;

	public DependentService(CountDownLatch latch) {
		this.latch  = latch;
	}

	@Override
	public void run(){
		latch.countDown();
	}
}
Phaser:
	CountDownLatch,CyclicBarrier,Plus more flexibility
public static void main(String []args){

	ExecutorService executor = Executors.newFixedThreadPool(4);

	Phaser phaser = new Phaser(1); //self-register

	executor.submit(new Service(phaser));
	executor.submit(new Service(phaser));

	phaser.bulkRegister(4); //bulk register later
}
public static class Service implements Runnable {
	private Phaser phaser;
	public Service(Phaser phaser) {
		this.phaser = phaser;
	}

	@Override
	public void run(){
		phaser.register();//allow threads to register themselves
		//some operations

		phaser.arrive();
		//other opreations
	}
}


Java Asynchronous Programming
Non-blocking IO and Asyschronous API 
	for(Integer id: employeeIds) {
		CompletableFuture.supplyAsync(() -> fecthEmployee(id)
			.thenApplyAsync(employee -> fetchTaxRate(employee))
			.thenApplyAsync(taxRate -> calculateTax(taxRate))
			.thenAcceptAsync(taxValue -> sendEmail(taxValue)));
	}
Servlets 3.0 Allows more concurrent requests
	@WebServlet(urlPatterns={"/user"}, asyncSupported=true)
	public class UserAsyncService extends HttpServlet {
		
		@Override
		public void doGet(HttpServletRequest request,HttpServletResponse response){
			final AsyncContext context = request.StartAsync();
			context.start(new Runnable() {
				public void run(){
					ServletResponse response = context.getResponse();
					context.complete();
				}
			});
		}
	}

Spring 5.0 Webflux
Java Fibers (lightweight threads)

=>Lock's condition class in java
private Lock lock = new ReentrantLoack();
private Condition conditionMet = lock.newCondition();

public void method1() thorws InterruptedException {
	lock.lock();
	try{
		conditionMet.await();
	}finally {
		lock.unlock();
	}
}

public void method2(){
	lock.lock();
	try{
		conditionMet.signal();
	}finally {
		lock.unloc(); 
	}

}
--------------------------------------------------------
public synchronized void execute(){
	try{
		monitor.wait();
	}catch(InterruptedException e){
		System.err.println("Interrupted");
	}
	//notify thread waiting on the monitor
	monitor.notify();

	//notify all threads
	monitor.notifyAll();
}

lock.lock();

try{
	condition.wait();
}catch(interruptedException e){
	System.err.println("Interrupted");
}

//notify thread waiting on the monitor
condition.signal();

//notify all threads
condition.signalAll();

lock.unlock();

-----------------------------------------
private Lock lock = new ReentrantLock();
private Condition added = lock.newCondition();
private Condition removed = lock.newCondition();

public void produce() throws InterruptedException {

	lock.lock();
	try{
		while(count == MAX_COUNT)
			removed.await();
		
		addData();
		added.signal();
	}finally {
		lock.unlock();
	}
}


public String consume() throws InterruptedException {
	lock.lock();
	try {
		while(count ==0)
			added.await();
		String data = getData();
		removed.signal();
	} finally {
		lock.unlock();
	}
}

=>Semaphore in java concurrency:
public static void main(String []args){
	Semaphore semaphore = new Semaphore(3);

	ExecutorService service = Executors.newFixedThreadPool(50);
	IntStream.of(1000).forEach(i->service.execute(new Task(semaphore)));

	service.shutdown();
	service.awaitTermination(1,TimeUnit.MINUTES);
}
static class Task implements Runnable {

	@Override
	public void run(){
		semaphore.acquireUninterruptibly();
		//semaphore.acquireUninterruptibly(2);

		semaphore.release();
		//semaphore.release(2);
	}
}
Restrict or Manage the use of limited resources	
Method					Meaning
tryAcquire				Try to acquire if no premit avilable do not block.
					Continue doing someting else.
tryAcquire(timeout)			Same as above but with timeout
availablePermits			Return count of permits available
new Semaphore(count,fairness)		FIFO Fairness guarantee for threads waiting the longest.


=>Java ReentrantLock - fairness,tryLock and more
Locks are explicit
Locks allow locking/unlocking in any scopes and in any order
Ability to tryLock and tryLock(timeout)

private static ReentrantLock lock = new ReentrantLock();
private static void accessResource(){
	lock.lock();
	try{
		//access the resource
	} finally {
		lock.unlock();
	}
}

private void accessResource() {
	synchronized(this){	//lock.lock();
	}			//lock.unlock(); 
}
Number of times lock called without calling unlock.

private static void accessResource(){
	lock.lock();
	lock.lock();

	int number = lock.getHoldCount();

	lock.unlock();
	lock.unlock();
}

private static ReentrantLock lock = new ReentrantLock();

private static void accessResource(){
	lock.lock();

	if(someCondition()){
		accessResource();		//recursive call Reentrant
	}
	lock.unlock();
}

Lock fairness:
	ReentrantLock lock = new ReentrantLock(true); //used for lock fairness
	Equal chance for all threads and slower
Unfair Barge-in
	ReentrantLock lockBargeIn = new ReentrantLock();
	ReentrantLock lockBargeIn = new ReentrantLock(false);
	Faster (more throughput) and possible thread starvation
Try lock
private static ReentrantLock lock = new ReentrantLock();
private static void accessResource() throws InterruptedException {
	boolean lockAcquired = lock.tryLock(timeout:5,TimeUnit.SECONDS);
	if(lockAcquired){
		try{
			//access resource
		}finally {
			lock.unlock();
		}
	} else {
		//do alternate thing
	}
}
Method used for debugging :
	isHeldByCurrentThread
	getQueueLength
	newCondition

=>Basic Lock funtion
ReadWriteLock Vs ReentrantLock
ReentrantLock - one thread at a time
ReadWriteLock - one writer thread at a time or multiple reader threads at a time

private ReentrantReadWriteLock lock = new ReentrantReadWriteLcok();

private ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
private ReentrantwriteLock.WriteLock writeLock = lock.writeLock();

private void readResource(){
	readLock.lock();
	//view the resource
	readLock.unlock();
}

private void writeResource(){
	writeLock.lock();
	//update the resource
	writeLock.unlock();
}
ReadLock and WriteLock though are 2 sepaate instances only 1 will be allowed at a time either ReadLock is being used (by n threads) OR WriteLock is being used (by 1 thread) but never both at same time.

=>Exchanger class in java
	Exchanger is same as SynchronousQueue but with handoff in both direactions.		
	Porducer and consumer exchanging full and empty buffer.

=>Striped Locks in Java Guava Library

private Striped<Lock> stripedLocks = Striped.lock(10);
public void update(Bag bag){

	Lock lok = stripedLock.get(bag.getId());
	lock.lock();
	if(!bag.hasBlueCandy()){
		bag.add(new Candy(color:"blue"));
	}
	lock.unlock();
}
:No matter how many bag instances we have,they will always resolve to 1 of these 10 locks.
Lock #= Object's hashcode%total number of locks.

Lock lock = stripedLocks.get(bag.getId());
Lock lock = stripedLocks.get(bag);

Many locks= More memory , good throughput
Less locks= Better memory, more contention
Striped locks=Middle ground
Imp:Chooes obj to retrive the lock
Need to have hashcode & equals
Striped versions of Lock,Semaphore and ReadWriteLock
Guava also has corresponding weak version for easy GC
=>What are coroutines aka Java Fibers in Project Loom?
thread1
	Runnable r = () -> {
		calculations();
		lock.lock();
			updateResource();
		lock.unlock();
	}

	Fibers.execute(()-> {
		calculations();
		lock.lock();
			updateSharedResource();
		lock.unlock();
	});
	Very light weight, few KBs of stack compared to 1MB for Thread.
	Do not block the underlying thread.
	Can use same API as used with Threads.
	Scheduling over kernel threads handled by Scheduler.
	Can run millions of Fibers in an application.
	Will enable servers handling thousands of concurrent connections.
	In other languages Kotlin,Python and Go
What are spinlocks?
	public void update(int id){
		Lock lock = getLock();
		lock.lock();
		try{
			BidItem item = getRecord(id);
			incrementBid(item);
			saveBid(item);
		}
		finally { 
			lock.unlock();
		}
	}
Concept of spinlock
	Keep trying to acquire the lock without going into wait state.
	Assumption: Most locks are used only for short period of time.
	aka budy-loop,busy-wait,spinning


				Spinning					Wait State
Lock available quickly		Improves efficiency by avoiding thread switch	Cost of thread switches
Lock takes time			Can cause thread starvation			Improves CPU utilization

JVM flag (pre Java 8)
-XX:-UseSpinning		//enables spinning for locks
-XX:PreBlockSping=12		//try 12 times,if still not available go into wait

Adaptive Spinning
Try spinning for some time,if not avaiable still,go into wait state.
JVM profiles the code and decides how much time to spin for.
=> What is deadlock?

private void execute() throws IntteruptedException {
	Lock lock = new ReentrantLock();
	lock.lock();

	BlockingQueue queue = new ArrayBlockingQueue(16);
	queue.take();

	Semaphore sem = new Semaphore();
	sem.acquire();
}

public synchronized void process() {
	// lock on 'this' object
}

public static synchronized int count(){
	//lock on class
}

Thread dump to see deadlock
jstack 11475(process id) ./out.txt
kill -3 12121


Java methods to detect deadlock.
private static void detectDeadlock(){
	ThreadMXBean threadBean = ManagementFactory.getThreadMXBean();
	long[] threadIds = threadBean.findDeadlockedThreads();
	boolean deadLock = threadIds !=null && threadsIds.length > 0;
	System.out.println("Deadlocks found: "+deadLock);
}
 How to prevent deadlocks?
	 Code with following precautions...
private void execute() throws InterruptedException {
	
	Lock lock = new ReentrantLock();
	boolean acquired = lock.tryLock(2, TimeUnit.SECONDS);

	BlockingQueue queue = new ArrayBlockingQueue(16);
	quque.poll(2, TimeUnit.SECONDS);

	Semaphore sem =  new Semaphore(1);
	sem.tryAcquire(2, TimeUnit.SECONDS);
}
-DeadLocks occur when a thread is waiting for a lock held by other thread and vice versa.
-Difficult to detect due to multiple lock types and thread sources.
-Detect at runtime using thread dumps.
-Consistent ordering of lock acquisition helps avoid deadlock.
-Using timeouts for lock acquisition can also help.

=>How to timeout the a thread?
public static void main(String []args){
	ExecutorService threadPool  = Executors.newFixedThradPool(2);

	threadPool.sumbit(() -> {
		//task
		//..
	});

	threadPool.shutdown();
	threadPool.shutdownnow();
}
shutdown()
	1. No new tasks accepted.
	2. Previously submmited tasks are executed.
shutdownNow()
	1. No new tasks accepted.
	2. Previously submmited tasks waiting in the queue are returned.
	3. Tasks being run by the threads are attempted to stop.
	4. This internally calls thread.interrupt for all running threads.

Part 1. Interrupts the polite way to ask for stopping.

public static void main(String []args){
	Thread t1 = new Thrad(()-> {
		while(!Thread.currentThread().isInterrupted()){
			//keep checking for interrupts
		}
	});
	t1.interrupt(); 
}
 Part 2. Conditional Timeout
	public void process(){
		MyTask task = new MyTask();
		Thread t1 = new Thread(task);
		t1.start();
		
		try{
			Thread.sleep(10*60*1000);
		}catch(InterruptedException e){
			//process exception
		}
		task.stop();
	}
	Using future.cancel with timeout
	public void process(){
		ExecutorService threadPool = Executors.newThreadPool();
		MyTask task  = new MyTask();

		final Future<?> future = threadPool.submit(task);
		try{
		}catch(InterruptedException | ExecutionException e){
			//process exception
		}catch(TimeoutException e){
			future.cancel(true); //if using interrupts
			task.stop(); // if using volatile
		}
	}
=>Implement Producer Consumer pattern using wait-notify
-Using locks and conditions
	1)
	public class MyBlockingQueue<E> {
		private Queue<E> queue;
		private int max = 16;
		private ReentrantLock lock = new ReentrantLock(true);

		public MyBlockingQueue(int size) {
			queue = new LinkedList<>();
			this.max = size;
		}

		public void put(E e){
			lock.lock();
			try{
				queue.add(e);
			}finally {
				lock.unlock();
			}
		}

		public E take(){
			lock.lock();
			try {
				E item = queue.remove();
				return item;
			}finally{
				lock.unlock();
			}
		}
	}
------
	2)
	public class MyBlockingQueue<E> {
		private int max;
		private Queue<E> queue = new LinkedList<>();
		private ReentrantLock lock = new ReentrantLock(true);
		private Condition noEmpty = lock.newCondition();
		private Condition notFull = lock.newCondition();

		public MyBlockingQueue(int size){
			queue = new LinkedList<>();
			this.max = size;
		}

		public void put(E e){
			lock.lock();

		}
		public void put(E e){
			lock.lock();
			try {
				while(queue.size() == max){
					notFull.wait();
				}
				queue.add(e);
				notEmpty.signlaAll();
			}finally {
				lock.unlock();
			}
		}
		public E take() {
			lock.lock();
			try {
				while(queue.size() == 0){
					notEmpty.await();
				}
				E item = queue.remove();
				notFull.signalAll();
				return item;
			}finally {
				lock.unlock();
			}
		}
	}

	3)
	private Obejct notEmpty = new Object();
	private Object notFull = new Object();

	public synchronized E take(){
		if(queue.size() == 0){
			notEmpty.wait();
		}
		E item = queue.remove();
		notFull.notifyAll();
		return item;
	}

	public synchronized void put(E e){
		if(queue.size() == max){
			notFull.wait();
		}
		queue.add(e);
		notEmpty.signalAll();
	}

ExecutorService threadPool = Executors.newFixedThreadPool(4);
private Set<Integer> getPrices(int productId) throws Interrupted {
	Set<Integer> prices = Collections.synchronizedSet(new HashSet<>());
	CountDownLatch latch = new CountDownLatch(3);

	threadPool.submit(new Task(url1, productId, prices, latch));
	threadPool.submit(new Task(url2, productId, prices, latch));
	threadPool.submit(new Task(url3, productId, prices, latch));

	latch.await(3, TimeUnit.SECONDS);
	return prices;
}
private class Task implements Runnable {
	private Set<Integer> prices;
	private CountDownLatch latch;

	@Override
	public void run(){
		prices.addPrice(price);
		latch.countDown();
	}
}

Using CompletableFuture

private Set<Integer> getPrices(int productId) throws InterruptedException {
	
	Set<Integer> prices = Collections.synchronizedSet(new HashSet<>());

	CompletableFuture<Void> task1 = CompletableFuture.runAsync(new Task(url1, productId, prices));
	CompletableFuture<Void> task1 = CompletableFuture.runAsync(new Task(url2, productId, prices));
	CompletableFuture<Void> task1 = CompletableFuture.runAsync(new Task(url3, productId, prices));

	CompletableFuture<Void> allTasks = CompletableFuture.allOf(task1, task2, task3);
	allTasks.get(3, TimeUnit.SECONDS);

	return prices;
}
Other solutions:
	Futures/Callable
	Conditions & Locks
	Phaser

=>Eager Initialization & Singleton
	public class Resource {
		private static volatile Resource instance = null;
		private Resource(){
		}

		public static Resource getInstance(){
			if(instance == null) {
				synchronized(this){
					if(instance == null){
						instance = new Resource();
						//double checked locking
					}
				}
			}
			return instance;

		}
	}
Using Inner class holder:
	public class Resource {
		private static class Holder {
			static final Resource INSTANCE = new Resource();
		}
		public static Resource getInstance() {
			return Holder.INSTANCE;
		}
		private Resource(){
		}
	}
Using ENUM:
	public enum Resource {
		INSTANCE;
		Resource(){
			//...
		}
	}

=>Race condition Vs Data Races in Java
Data Race:
	-Multiple threads access shared variable without synchronization.At least one thread is writing to the variable.
	-Practically not an issue in java

Race Condition 
	-Multiple threads access shared variable.Value of variable depends on execution of threads.
	-Common in multi-threaded applications

=>Completable Future
	It's used for perform possible  asynchronous (non-blocking) computation and trigger dependant computations which could aslo be asynchronous.

	for(int i = 0; i< 100; i++) {
		ExecutorService cpuBound = Executors.newFixedThreadPool(mThreads:4);
		ExecutorService ioBound =  Executors.newChachedThreadPool();

		CompletableFuture.supplyAsync(() -> getOrder(), ioBound
				.thenApplyAsync(order -> enrich(order), cpuBound)
				.thenApplyAsync(order -> performPayment(order), ioBound)
				.thenApplyAsync(order -> dispatch(order))
				.thenAccept(order -> sendEmail(order));
		);
	}








































































































































































































































