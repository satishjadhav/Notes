https://javarevisited.blogspot.com/2017/06/how-spring-mvc-framework-works-web-flow.html


Explain flow of an Web/HTTP request ?
-It all starts with the client, which sends a request to a specific URL. When that request hit the web container e.g. Tomcat it look into web.xml and find the Servlet or Filter which is mapped to that particular URL.It delegate that Servlet or Filter to process the request.
-Web container e.g tomcat is reponsible for creating Servlet and Filter instances and invoking their various life-cycle methods.e.g. init(),service(),destroy().In the case of HTTP request HttpServlet handles that and depending upon the HTTP request method various doXXX() method is invoked by container e.g doGet() to process GET request and doPost() to process POST request.
-If you remember, to enable Spring MVC, we need to declare the DispatcherServlet from Spring MVC jar into web.xml. This Servlet listens for a URL pattern * as shown in below web.xml, which means all request is mapped to DispatcherServlet.
-Though it is not mandatory, you can have other servlet mapped to other URL if you want to, but if you are using Spring MVC to develop web application or RESTful web service, it make sense to pass through all request via DispatcherServlet.
-web.xml
<web-app>
	<!-- The front controller of this Spring Web application, responsible 
	for handling all application requests -->
	<servlet>
		<servlet-name>Spring MVC Dispatcher Servlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/web-application-config.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>example</servlet-name>
		<url-pattern>*</url-pattern>
	</servlet-mapping>
</web-app>
-The DispatcherServlet the passes the request to a specific controller depending on the URL requested.
-It uses the @RequestMapping annotation or Spring MVC configuration file to find out mapping of request URL to different controllers.
-It can also use specific request processing annotations e.g. @GetMapping or @PostMapping. Controller classes are also identified using @Controller and @RestController (in the case of RESTful Web Services) annotations.
-After processing the request, Controller returns a logical view name and model to DispatcherServlet and it consults view resolvers until an actual view is determined to render the output.
-The DispatcherServlet from Spring MVC framework is an implementation of Front Controller Pattern and its also a Single point of entry to handle all incoming requests,ut again that depends upon your URL pattern mapping and your application.
-It delegates requests for further processing to additional components e.g. Controllers, Views, View Resolvers, handler mappers, exception handlers etc. It can also map directly to /, but then the exception for handling static resources needs to be configured.
-The flow of RESTful Web Service request is also not very different from this. It follows the same path but in the case of REST, the Controller methods are annotated with @ResponseBody which means it doesn't return a logical view name to DispatcherServlet, instead it write the output directly to HTTP response body.
-Summary
	1) Client sends an HTTP request to a specific URL
	2) DispatcherServlet of Spring MVC receives the request
	3) It passes the request to a specific controller depending on the URL requested using @Controller and @RequestMapping annotations.
	4) Spring MVC Controller then returns a logical view name and model to DispatcherServlet.
	5) DispatcherServlet consults view resolvers until actual View is determined to render the output
	6) DispatcherServlet contacts the chosen view (e.g. Thymeleaf, Freemarker, JSP) with model data and it renders the output depending on the model data
	7) The rendered output is returned to the client as response

https://javarevisited.blogspot.com/2017/02/how-to-consume-json-from-restful-web-services-Spring-RESTTemplate-Example.html#axzz4jWEcwHFD
-RESTTemplate is another useful utility class which allows you to interact with RESTful web services from a java applicatoin built using Spring framework.
-It's a feature rich and supports almost all REST methods e.g. GET, POST, HEAD, PUT or DELETE
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
--
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-

