https://app.pluralsight.com/library/courses/spring-jpa-hibernate
--------------------------------------------------------------------------------
-Developing Applications with Spring and JPA/Hibernate
-What is Spring?
	A framework originally built to reduce the complexities of Enterprise Java development.
	A POJO based and Interface driven
	Very lightweight and unobtrusive compared to older J2EE methodologies
	APO/Proxies
	Built around patterns and best practices
		Singleton
		Factory
		Abstract Factory
		Template Method
		Annotation based configuration
-What is JPA?
	Started as Hibernate and then extracted a standard interface
	Object Relational Mapping (ORM)
	POJO based 
		XML configuration
		Annotation Based Configuration
	Built around patterns and best practices
		Helps keep your code OO
		Plug gable Persistence Providers
			Hibernate
			Toplink
			EclipseLink
			OpenJPA
-History
	Hibernate 1.0 -> JDO 1.0 -> JPA 1.0 -> JPA 2.0 -> hibernate 3.0 (2010)
-JPA removes boiler plate code
-Developers build objects , JPA bridges the gap
-Spring handles the configuration
-Code can focus on testing
-Transactions are transparent to the developer
-Annotation based development
-Controller
	Handles incoming requests and building the response
	Business logic should not be handled here
	Works with the service and repository tire for business logic and data gathering
	Annotated with @Controller
	Handles Exceptions and routes the view accordingly
-Service
	Annotated with @Service
	The service tier describes the verbs (actions) of a system
	Where the business logic resides
	Ensure that the business object is in a valid state
	Where transactions often begin (two phase commits)
	Often has the same methods as the Repository, but different focus
-Repository	
	Where we interact with JPA
	Annotated with @Repository
	The Repository tier describes the nouns (data) of the system
	Focused on persisting and interacting with the database.
	One-to-one mapping with an object
	Often a one-to-one mapping with a database tablet
-Autowiring Constructor
	@Component
	public class Engine {
		...
	}
	
	@Component
	public class Car {
		
		private Engine engine;
		
		@Autowired
		public Car(Engine engine) {
			this.engine = engine;
		}
	}
-Spring configuration can be done multiple ways:
	XML,Annotations,Java Configuration
	Using annotations there is still some xml configuration
	Context files are loaded multiple ways:
		Dispatcher Servlet
		Loader Listener
		Import
->Configuration of Spring and JPA for development
-persistence.xml
	If using JPA without SPring this is where you define settings:
		Datasource
		Allowed Operations
		Caching
	Why use Spring then:
		Can override settings per environment
		Easier to testing
		Inject into other resources
	Still need an empty persistence.xml
		src/main/resources/META-INF/persistence.xml
-jpaContext.xml
	Used in place of the persistence.xml
	Doesn't have to be named jpaContext.xml
	Loaded from the Class path
		src/main/resources/jpaContext.xml
	Contains:
		EntityManagerFactory
			Jpa Vendor
			Jpa Properties
		Transaction Manager
		Annotation configuration
		Datasource configuration or lookup
-Entity Manager Factory
	LocalContainerEntityManagerFactoryBean
		Located in spring-orm.jar
		References our persistence unit
		Injected Datasource if one isn't defined in the the persistence unit
		Defines what vendor (provider) we are using
		Vendor specific JPA properties
-Transaction Manager
		JpaTransactionManager
			Takes the entityManagerFactory as a ref
		Annotation Driven
		spring-tx.jar
-Overview of JPA and creating your first entity
-What is JPA	
	Actually just a specification
	Thought of as Object Relational Mapping tool (ORM)
		An ORM is an implementation of JPA
	A specification for accessing , persisting and managing data between Java objects/ classes and a relational database.
	It is not SQL
		Uses JPQL instead
	Heavy focus on POJOs	
-Providers
-JPA/Hibernate configuration
	LocalContainerEntityManagerFactoryBean
		jpaPropertyMap
	hibernate.dialect
	hibernate.format_sql
	hibernate.hbm2ddl.auto
		create
		create-drop
		update
		validate
		none
	
-Entity Annotations
	@Entity - Declares the object as an Entity and now the database will be aware of it
	@Table - Describes more specific details about the DB i.e name schema.
	@Id Identifier attribute for a simple primary key type
	@GeneratedValue - Used in conjunctions with @Id
		IDENTITY - Used to specify a database identity column
		AUTO - Automatically chooses an implementation based off of the underlying database
		SQUENCE -Works with a sequence (if the database supports them),see @SequenceGenerator
		TABLE - Specifies that a database will use an identity table and column to ensure uniqueness see @TableGenerator
-Default Columns
	we don't have to accept the defaults that are created for use
	@Column will allow us to override column names or add
	Descriptive information about it
		columnDefinition,insertable,length,name,nullable,precision,scale,table,unique,updatable
-How do we start using it?
	@PersistenceContext
		Injects the Entity Manager in our code
	@Service
		Spring service where business logic is located
	@Repository
		Spring DAO object where database interaction occurs
	@Transactional
		Used to start a transaction
-Join Types
	@OneToOne
	@OneToMany
	@ManyToMany
	@ManyToOne
-Can be used in various configuration
	Unidirectional
	Bidirectional
	Cascade
-@OneToMany
-Fetch type
	Lazy - Queries the database when that property is called.
	Eager- Queries the database when the object is originally created.
	e.g.
		@OneToMany(mappedBy="goal", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
		private List<Exercise> exercises = new ArrayList<Exercise>();
	
-OpenEntityManagerViewFilter
	<filter>
		<filter-name>Spring OpenEntityManagerViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.OpenEntityManagerViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>Spring OpenEntityManagerViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
-Projection
	Great way to present object to the UI
	Objects added using JPQL syntax
	Projection Objects can be Jpa Entities
	Need a constructor for the projection
-NamedQueries
	Cleaner than adhoc JPQL
	Not required but focuses on object
-Summary
	Annotations
	Overriding Default
	Service and Repository
	Joins
	FetchTypes
	OpenEntityManagerViewFilter
	Projections
	NamedQueries
-Spring Data JPA
-Need to add the spring-data-jpa.jar
	Spring-data-jpa contains an incompatible transitive dependency
	Exclude spring-aop
	<dependency>
		<groupId>org.springframework.data</groupId>
		<artifactId>spring-data-jpa</artifactId>
		<version>1.3.0.RELEASE</version>
		<exclusions>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
		</exclusions>
	</dependency>
