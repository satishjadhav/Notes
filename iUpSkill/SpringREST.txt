https://app.pluralsight.com/library/courses/spring-rest/table-of-contents
--------------------------------------------------------------------------------
-Representational State Transfer (REST) is an architectural style that defines a set of constraints and properties based on HTTP.
-GET:		Retrieve data from the server.
-POST:		Add data to the server.
-PUT:		Modify already existing data.
-DELETE:	Delete data from the server.
-Spring Container
	Life Cycle Management
	Dependency Injection
	Build from Configuration
		Annotation
	Strength
		Molecularity
		Extensibility
-Enterprise Application Framework
-Spring MVC Architecture
-Error Handling
-Java Validation JSR-380
	Validation in Model
	Constraints on Properties
	Add @Valid to input
	MethodArdumentNotValidException
	@NotNull @AssertTrue @Min @Max @Size @Digits @Pattern
	@NotEmpty @NotBlank @Positive @Email @Past @Future
-Testing
	Meet the requirements
	Responds Correctly to inputs
	Performs within Acceptable Time
	Can be Installed and Run
	Achieves Results for the stakeholders
-Testing
	Smoke and Sanity Testing
	Continuous Testing
	Regression Testing
	Performance Testing
	Acceptance Testing
-Testing Levels
	Unit Testing
	Integration Testing
	System Testing
-Spring boot Test Libraries
	JUnit
		De-facto standard
	Spring Test
		Spring Boot Test Support
	AssertJ
		A Fluent Assertion Libraries
	JSONPath
		XPath for JSON
	Mockito
		Mocking Framework
-HATEOAS
	Hypermedia As The Engine Of Application State
	is a component of the REST application architecture
-	JSON with Hyperlinks
	Spring-Data-REST
-	Relations
		Hyperlinks Acts as
			Primary and Foreign Keys
	Data model is Mirrored in JSON
-	JUnit	
		assertEquals(b,a)
		assertEquals(3,list.size())
		assertThat(list,hasItem(1))
	Hamcrest
		assertThat(a,is(equalTo(b))
		assertThat(list,hasSize(3))
		assertThat(list,contains(1,2,3))
	AssertJ	
		assertThat(a).isEqualTo(b)
		assertThat(list).hasSize(3)
		assertThat(list).contains(1,2,3)


























