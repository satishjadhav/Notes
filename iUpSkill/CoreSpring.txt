https://app.pluralsight.com/library/courses/spring-framework-spring-fundamentals/table-of-contents
--------------------------------------------------------------------------------
-What is SPRING?
	Inversion of Control Container
	Dependency Injection
	Java without Enterprise JavaBeans(EJBs)
-Dependency Injection
-Testability , Maintainability , Scalability , Complexity , Business Focus
-Spring Architecture
-Spring Configuration Using Java
	No applicationContext.xml
-@Configuration
	@Configuration
	public class AppConfig {
		
		@Bean(name = "customerRepository")
		public CustomerRepository getCustomerRepository() {
			return new HIbernateCustomerRepositoryImpl();
		}
	}
	
	@Configuration applicationContext.xml replaced by @Configuration
	@Configuration at class level
	@Bean method level
-Demo
	ApplicationContext appContext = new AnnotationConfigApplicationContext(AppConfig.class);
	SpeakerService service = appContext.getBean(s: "speakerService", SpeakerService.class);
	System.out.println(service.findAll().get(0).getFirstName());
-Constructor injection
	Just like setter injection
-Spring Scopes and Autowiring
	Singleton
	Prototype
-Singleton
	One instantiation
	Default bean scope
	Single instance per Spring container
	
	@Scope(value= BeanDefinition.SCOPE_SINGLETON)
-Prototype
	Per request 
	Opposite of singleton
-Web Scopes
	Request 
	Session
	GlobalSession
-Autowired
	Covension over configuration
	@ComponentScan({"com.pluralsight"})
	
	@Autowired
	public void setRepository(SpeakerRespository respository) {
		System.out.println("SpeakerService setter");
		this.respository = respository;
	}
-Sterotypes
	@Component
	@Repository
	@Service			//Just for to add business logic
-Summary
	Singleton
	Prototype
	Web Scopes
		Request
		Session
		GlobalSession
	Autowiring
-Spring Configuration Using XML
	First approach
	Simpler
	Separation of concernsf
-applicationContext.xml
	Spring Context sort of HashMap
	Can simply be a registry
	XML configuration beging with this file
-e.g.
	<bean name="speakerRepository" class="com.pluralsight.repository.HIbernateCustomerRepositoryImpl" /> 
	<bean name="spekerService" class="com.pluralsight.service.SpeakerServiceImpl">
		<property name="speakerRepository" ref="speakerRepository"/>
	</bean>
-Setter Injection
	Setter Injection
	Constructor Injection
	Used together
	Better for existing code
-Spring automatically wires beans
	byType
	byName
	constructor
	no or none autowiring
-Advance Bean Configuration
	BeanPostProcessor
	FactoryBean
	SpEL(Spring Expression Language)
	Proxies
	Profiles
-Bean Lifecycle
	Instantiation
	Populate Properties
	BeanNameAware
	BeanFactoryAware
	Pre Initialization - BeanPostProcessor
	InitializeBean
	initMethod
	Post initialization - BeanPostProcessor
-Add dependency
	<dependency>
		<groupId>javax.annotation</groupId>
		<artifactId>javax.annotation-api</artifactId>
		<version>1.3.2</version>
	</dependency>
-FactoryBean
	Builds on initMethod concept
	Factory Method Pattern
	Leagcy Code
	Contract without Constructor
	Static Methods
-SpEL
	Manipulate Object Graph
	Evaluate at Runtime
	Configuration
-Spring APO Proxies
	ProxyFactory factory = new ProxyFactory(new SimplePojo());
	factory.addInterface(Pojo.class);
	factory.addAdvice(new RetryAdvice());
	factory.setExposeProxy(true);
	
	Pojo pojo = (Pojo) factory.getProxy();
-Bean Profiles
	VM Options
		-Dspring.profiles.active=dev