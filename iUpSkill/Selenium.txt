https://app.pluralsight.com/library/courses/java-testing-introduction/table-of-contents
--------------------------------------------------------------------------------
-The Testing Hierarchy
	Unit Testing
	Aggregate Testing
	System Testing
-Testing Code
	import orh.junit.Assert;
	import org.junit.Test;
	
	public class CafeTest {
		
		@Test
		public void canBrewEspresso() {
			
			Cafe cafe = new Cafe();
			cafe.restockBeans();
			
			Coffee coffee = cafe.brew(Coffee.Espresso);
			
			Assert.assertEquals(CoffeeTyoe.Espresso, coffee.getType());
			Assert.assertEquals(0, coffee.getMilk());
			Assert.assertEquals(7, coffee.getBeans());
		}
	}
-The common structure of Tests
	given 			when			then

@Test
public void brewingEspressoConsumeBeans() {
	
	//given
	Cafe cafe = new Cafe();
	cafe.restockBans(7);
	
	//when
	Coffee coffee = cafe.brew(CoffeeType.Espresso);
	
	//then
	Assert.assertEquals(0, cafe.getBeasnsInStock());
}
-Checking for Exceptions
	@Test(expected = IllegalArgumentException.class)
-Exposing a reason
	List<Coffee> order = cafe.brewOrder(...);
	assertEquals("Wrong quantity of coffee",1, order.size());
-Before and After
	@Before
		Before each test method runs
	@After
		After each test method runs
	@BeforeClass
		Before all tests in the class
	@AfterClass
		After all tests in the class
-e.g
	
	@BeforeClass
	public static void beforeClass() {
		System.out.println("before class");
	}
	
	@AfterClass
	public static void afterClass() {
		System.out.println("after class");
	}
	
	@Before
	public void before() {
		System.out.println("before");
	}
	
	@After
	public void after() {
		System.out.println("after");
	}
-Hamcrest
	A compositional matcher library
	Matcher: A simple and general blob of logic used in assertions
	e.g. A map contains "this" key
-A Dependency
	A relationship between two components where the functionality of one component relies on another component.
-Dependency Injection
	Pattern for decoupling
	Enables test isolation: Mocks and Stubs
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-